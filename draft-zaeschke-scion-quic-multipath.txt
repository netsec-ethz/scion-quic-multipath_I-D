



PANRG                                                      J. van Bommel
Internet-Draft                                                   F. Wirz
Intended status: Informational                          T. Zaeschke, Ed.
Expires: 5 December 2025                                      ETH Zurich
                                                             3 June 2025


         Guidelines for QUIC Multipath over Path Aware Networks
               draft-zaeschke-scion-quic-multipath-latest

Abstract

   This document provides informational guidance for using the Multipath
   Extension for QUIC [QUIC-MP] with path aware networks (PAN).  PANs
   may provide hundreds of paths between endpoints, each path including
   detailed path metadata that facilitates informed path selection.

   Using the QUIC Multipath Extension over PAN creates pitfalls as well
   as opportunities for associated algorithms, such as for path
   selection, congestion control, and scheduling.  This document also
   gives general considerations for API design and applications that use
   multipath QUIC over SCION.

   This memo looks specifically at PANs for inter-domain routing.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at https://netsec-
   ethz.github.io/scion-quic-multipath_I-D/draft-zaeschke-scion-quic-
   multipath.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-zaeschke-scion-quic-
   multipath/.

   Discussion of this document takes place on the WG Working Group
   mailing list (mailto:panrg@irtf.org), which is archived at
   https://datatracker.ietf.org/rg/panrg.  Subscribe at
   https://www.ietf.org/mailman/listinfo/panrg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/netsec-ethz/scion-quic-multipath_I-D.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 5 December 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
     1.1.  SCION
   2.  Conventions and Definitions
     2.1.  Terminology
   3.  Multipath Features
     3.1.  Path Metadata
       3.1.1.  Path Metadata Granularity
       3.1.2.  Path Metadata Dimensions
       3.1.3.  Path Metadata Liveliness
       3.1.4.  Path Metadata Reliability
     3.2.  Path Selection
   4.  Multipath Categorization
   5.  Notable Differences and Benefits
     5.1.  Endpoint Identity
     5.2.  Path Identity
       5.2.1.  Interoperability of the QUIC-MP Path ID and the Network
               Paths
     5.3.  Disjointness
     5.4.  Path Metadata
     5.5.  Explicit Path Selection
   6.  QUIC-specific advantages?
   7.  API Considerations
     7.1.  Initialization
     7.2.  Network Address and Network Path
       7.2.1.  Recommendation
     7.3.  General API
   8.  QUIC Implementation Considerations
     8.1.  Automatic Path Changes - Initial Handshake
     8.2.  Path Change Detection - Path Injection
   9.  Algorithm Considerations
     9.1.  MTU Detection
     9.2.  Congestion Control
       9.2.1.  Coupled Congestion Control
     9.3.  RTT Estimation
     9.4.  Retransmission & PTO
     9.5.  DMTP
     9.6.  Path Selection
       9.6.1.  Dynamic Approach
       9.6.2.  Bottleneck Detection
     9.7.  Packet Scheduling
   10. Applications
     10.1.  Data Transfer
     10.2.  Low Latency
     10.3.  High Availability / Redundancy
     10.4.  Multipathing for Anonymity
   11. Summary of Recommendations
     11.1.  Address Validation Token
   12. Security Considerations
     12.1.  Probe Fingerprinting
     12.2.  Path Injection
       12.2.1.  Memory Exhaustion
       12.2.2.  Traffic Redirection to Different AS
       12.2.3.  Traffic Redirection over Different Path
       12.2.4.  Traffic Amplification
     12.3.  Jelte's Attack
     12.4.  More ?
   13. IANA Considerations
   14. References
     14.1.  Normative References
     14.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Path aware networks (PAN) may provide a large selection of available
   path, each path with detailed path metadata.  Path metadata may
   contain path properties such as latency, bandwidth, MTU, or
   geographic location, potentially with granularity down to individual
   links and router interfaces.

   When only one path is used, metadata and path selection capabilities
   allow identifying the best path for each use case while providing
   suitable backup paths if the first path degrades or other paths
   become comparatively better.

   When data is transferred over multiple paths in parallel, detailed
   metadata provides information about any links where different paths
   overlap and about the properties of these links.  This allows, for
   example, avoiding bottlenecks by choosing paths such that they don't
   share links that have low bandwidth capacity.  This is useful for
   developing or improving algorithms, for example, for path selection,
   or more informed algorithms for congestion control.

   The recommendations in this document are categorized into
   recommendations for API design (Section 7), library implementations
   (Section 8) and algorithm design (Section 9).

   As a practical example of an inter-domain PAN with multipathing
   capability, we refer to the SCION ([SCION-CP], [SCION-DP]).

1.1.  SCION

   One example of a PAN is SCION [SCION-CP], [SCION-DP].  SCION is an
   inter-domain routing protocol that provides path metadata on the
   level of links and router interfaces.  This metadata provides many
   opportunities for improving congestion control and other algorithms.
   It also avoids some problems that gave rise to current algorithms.

   The SCION protocol makes detailed path information available to
   endpoints.  Besides the 4-tuple of address/IP at each endpoint, the
   information includes a list of all traversed ASes and respective
   links between ASes, as well as metadata about ASes and links,
   including MTU, bandwidth, latency, AS internal hopcount, or
   geolocation information.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.1.  Terminology

   We assume that the reader is familiar with the terminology used in
   [QUIC-TRANSPORT] and [QUIC-MP].  We also draw on the terminology of
   SCION ([SCION-CP] and [SCION-DP]).  For ease of reference, we have
   included some definitions here, but refer the reader to the
   references above for complete specifications of the relevant
   terminology.

   *Autonomous System (AS)*: An autonomous system is a network under
   common administrative control.  For example, the network of an
   Internet service provider or organization can constitute an AS.

   *Endpoint*: An endpoint is the start or end of a path, as defined in
   [PATH-VOCABULARY].

   *Inter-AS Link*: A direct link between two external interfaces of two
   ASes.

   *Intra-AS Link*: A direct link between two internal interfaces of a
   single AS.  A direct link may contain several internal hops.

   *Link*: General term that refers to "inter-AS links" and "intra-AS
   links".

   *Network Address*: In IP networks, the network address is the IP and
   port of an endpoint.  In PANs, the network address may hold
   additional information, such as the AS number of the endpoint.

   *Network Path*: This term exists only in PANs.  The network path
   consists of the network address at each endpoint, a list of all
   traversed ASes, and links inside and between ASes, including
   interface IDs on border routers of each AS.

   *QUIC-MP Path*: Consists of the network address at each endpoint and
   a Path ID (see [QUIC-MP]).  The Path ID allows having multiple
   logical paths for the same set of network addresses.

   *Path Metadata*: Path metadata is additional data that is available
   to endpoints when they request a selection of paths to a destination.
   Path metadata is authenticated by the owner of each link, but is
   otherwise not verified.  Path metadata includes data about ASes and
   links, such as MTU, hardware bandwidth, latency, AS internal hop
   count, or geolocation information.

3.  Multipath Features

   In this document, we focus on two features that PANs provide for
   multipath applications: metadata and paths selection.

3.1.  Path Metadata

   We assume that path metadata reflects hardware properties rather than
   live traffic information (especially for bandwidth and latency).  One
   should not expect path metadata to be updated more than once every
   hour.

3.1.1.  Path Metadata Granularity

   We assume a protocol for inter-AS routing that provides path
   information per AS, more specifically per border router of an AS and
   per any link between any border routers (link may be internal or
   external to an AS).

   If we compare multiple paths, we can see where they overlap and what
   the hardware characteristics of the overlapping parts are.

3.1.2.  Path Metadata Dimensions

   We assume a protocol that provides information on links and border
   routers, such as MTU, bandwidth, latency, geo-location, as well as
   identities (interface ID, port and IP) of border routers.  We assume
   that bandwidth and latency reflect hardware characteristics rather
   than current or recent load.

3.1.3.  Path Metadata Liveliness

   We assume that path metadata is updated at most every few hours.
   This is appropriate because all values reflect hardware properties
   rather than current traffic load.  Path metadata is disseminated
   together with paths, so its freshness also depends on the path
   lifetime, which can be several hours.

3.1.4.  Path Metadata Reliability

   We assume that all path metadata is truthful.  The metadata is
   cryptographically protected and signed by the data originator, which
   is the relevant AS owner.  However, the data correctness is not
   verified, instead we rely on the AS owner to be honest.

   It is possible for an AS to offer deceptive metadata, see wormhole
   attack in Section 7.3.4 of [SCION-CP].

3.2.  Path Selection

   We assume that a PAN protocol allows explicitly selecting paths,
   based, for example, on path metadata, such as latency, bandwidth, AS
   numbers, or geolocation of routers.  Paths can be added and removed
   from a connection.  Paths may have an expiration date, after which
   they are invalid.

   See Section 9.6 for details.

4.  Multipath Categorization

   This document distinguishes the following usage categories:

   *  High bandwidth (BW): Optimizing bandwidth by parallel transfer on
      multiple paths.

   *  Minimum latency (LAT): Optimizing latency for low latency.  This
      can be achieved by regularly checking multiple paths and using the
      one with the lowest latency or by parallel transmission over
      multiple paths.

   *  Fault tolerance (FT): Optimizing fault tolerance through parallel
      transfers over multiple paths.

   *  Evasion (EVA): Avoid certain links or ASes, for example, based on
      MTU, geolocation or AS number.  Evasiona can also imply frequent
      path switching in order to avoid tracking or detection by
      adversaries.

   The discussions of these categories are written with multiple paths
   per interface in mind (i.e. multiple paths per 4-tuple).  However,
   they can be generalized to multipathing over multiple interfaces.

   These categories can be combined.  For example, LAT and FT may often
   be combined and EVA can be useful in combination with any other
   category.

5.  Notable Differences and Benefits

   Using QUIC or QUIC-MP over a PAN changes some of the underlying
   assumptions.  This provides certain benefits, such as additional
   information and control over paths, but also some pitfalls.

5.1.  Endpoint Identity

   In QUIC, endpoints are identified by their IP and port number.  This
   works because IP addresses are unique (globally, or in whatever
   context they are used).

   PANs may use a network address beyond the 4-tuple of local/remote IP/
   port.  For example, SCION (Section 1.1), allows IPs from the private
   IP ranges (e.g. 192.168.1.1/32).  To uniquely identify endpoints
   globally, the AS (autonomous system) identifier is added to fully
   qualify a network address.  This has consequences for security
   mechanisms.  Implementations need to be careful to consider the full
   network address, for example, when triggering path validation (see
   Section 12.2 and Section 11.1).

5.2.  Path Identity

   The identification of "paths" varies between QUIC, QUIC-MP and PANs.

   *  [QUIC-TRANSPORT] uses a 4-uple of local/remote IP/port to
      distinguish paths.

   *  [QUIC-MP] extends the 4-tuple with a path IDs to distinguish
      logical paths (connections).

   *  PANs can typically distinguish paths through detailed path
      metadata based on the physical network path.  The metadata may
      additionally include an expiration date that may or may not be
      used to distinguish path instances.

   When using a PAN, the path identity can and should be used to detect
   changes even when the 4-tuple of local/remote IP/port (or equivalent)
   stays the same.

   *TODO reference RECOMMENDATIONS, but exclude expiration*.

   Change detection can be useful to avoid unintended path changes or to
   trigger actions, such as resetting congestion control or RTT
   estimation algorithms.

5.2.1.  Interoperability of the QUIC-MP Path ID and the Network Paths

   Unfortunately, there is not always a 1:1 mapping between path IDs and
   networks paths as they are used in SCION.

   *  A PAN path may expire and should be replaceable with a new version
      without requiring a new Path ID (*TODO TBD*: We could also require
      path migration in this case)

   *TODO* In future we may have more dynamic path availability with live
   metadata.  Do we really need path migration for every (small) route
   change?

   *  Network address changes should trigger path validation

   *  Network path changes should trigger algorithm reset (CC, RTT
      estimate), see Section 5.1 of [QUIC-MP].

   *TODO* It seems path migration is only useful when the network
   address changes?

   In SCION, neither the AS nor the network path are validated and can
   be forged, see Section 12 for a discussion.  However, SCION provides
   extensions for validating these properties, namely SPAO and EPIC.
   (*TODO* remove or replace references to SPAO/EPIC?)

5.3.  Disjointness

   For FT, paths are more interesting if they are disjoint.  For BW,
   paths should mostly be disjunct, but overlap is acceptable if the
   overlapping links have high BW available (see Section 9.6.2).

   For LAT and EVA, path disjointness is less important.

   *TODO* Discuss link level, router level and AS level path
   disjunctness.

5.4.  Path Metadata

   SCION paths have associated metadata with latency and bandwidth
   information.  The values represent best case values and tend to be
   updated rarely, for example every few hours (depending on the
   implementation).

   Path metadata may also be incomplete.  ASes are not required to
   provide or regularly update the data.

   Users of path metadata must keep in mind that the data is mostly not
   verifiable but depends on the diligence and trustworthiness of the
   link owners.  However, once disseminated by a link owner, the path
   metadata is authenticated and cannot be changed by other parties.

   Due to the inherent unreliability, users should implement checks to
   verify that a link holds up to the promised capabilities.

5.5.  Explicit Path Selection

   Based on path metadata (Section 5.4) and algorithmic analysis
   (Section 5.3), an endpoint can explicitly select paths or avoid
   paths.  This allows avoiding or abandoning paths for more paths with
   more suitable properties.

6.  QUIC-specific advantages?

   Describe why we are writing this document for QUIC and especially for
   QUIC-MP. *TODO*

7.  API Considerations

   Concrete API design depends on many factors, such as the programming
   language, intended use or simply personal preference.  We therefore
   suggest only features, not concrete API designs.

7.1.  Initialization

   When a QUIC(-MP) socket is created, it can be useful (depending on
   the programming language) to allow injection of custom modules:

   *  Custom UDP underlay (for injecting a PAN, such as SCION).

   *  Custom DNS resolver (if the library resolves URLs)

   *  Custom congestion control and RTT estimation algorithms

   *  Custom Packet scheduling algorithm

   *  PAN exclusive: path selection algorithms.  This differs from
      scheduling algorithms by determining which paths should be allowed
      at all and which should be held as backup paths.  Path selection
      algorithms should have access to initial_max_path_id (Section 2.1
      of [QUIC-MP]) and MAX_PATH_ID frames (Section 4.6 of [QUIC-MP] in
      order to know when, and how many, paths can be created.  Path
      selection must exclude paths that are too long to guarantee 1200
      bytes MTU for QUIC packets.  The algorithm also needs to know
      about PATH_AVAILABLE and PATH_BACKUP, see Section 3.3 of
      [QUIC-MP], as well as PATH_ABANDON Section 3.4 of [QUIC-MP].
      *TODO* Should we also consider probing frames here ({
      {Section 3.1.2 of QUIC-MP}}).?

   Many available implementations already allow injecting most of these
   modules.

7.2.  Network Address and Network Path

   Generally, it can be useful if any API of a QUIC-MP library uses not
   only IP/port for addressing local/remote peers, but uses a network
   address (IP + port + other identifiers, such as AS number) and a
   network path.

   Note that a "network path" is different from [QUIC-MP] path ID.
   There is usually a 1:1 mapping from network path to path ID, but the
   network path may change while the path ID remains the same.

   For example: - During path migration (*TODO* ref), a path ID may be
   (loosely) associated with multiple network paths. - A PAN library may
   have paths that can expire and that can be renewed automatically.
   However, this should usually result in an identical path (except for
   the expiration date).

7.2.1.  Recommendation

   PAN libraries should, as default when used with QUIC, not
   automatically switch paths, except when renewing expired paths with
   otherwise identical paths.

   The PAN library may have a configuration option to automatically
   switch paths, potentially after probing, but this should happen only
   when explicitly configured and when the overlay libraries can detect
   or otherwise tolerate paths changes.

   QUIC(-MP) libraries should consider the possibility that paths may
   change.  Typical algorithms for congestion control etc can tolerate
   this.  Potential implications of skipping path validation need to be
   considered.

   See also: - resetting algorithms (*TODO* refs) - path validation
   considerations (*TODO* refs)

7.3.  General API

   The API of a QUIC-MP implementation that works with PAN should:

   *  Expose Path ID

   *  Expose API for custom congestion control algorithms

   *  Expose callback for QUIC-MP path abandon (REFERENCE!!!)

   *  Expose API for name resolution (only if the library does that),
      not useful if API works with IP/port only.

   *  Expose API for usage profile.  Applications will have very
      different requirements on a multipath API, see Section 4.  A
      comprehensive API should therefore allow for mostly automatic
      selection of Path Selection and Congestion Control algorithms.

8.  QUIC Implementation Considerations

   *TODO READ:* See also "Implementation Considerations" in Section 5 of
   [QUIC-MP].

   Recommendations are summarized in Section 11

8.1.  Automatic Path Changes - Initial Handshake

   [QUIC-TRANSPORT] requires that there is no connection migration
   during the initial handshake, and that there are no other packets
   sent (including probing packets) during the initial handshake, see
   Section 9 of [QUIC-TRANSPORT], paragraphs 2 and 3.

   An implementation must ensure at some level that no path change or
   probing occurs.

   This may be covered by the recommendation that a PAN layer should not
   automatically switch without explicit request by the QUIC(-MP) layer.
   See also Section 7.2.1

8.2.  Path Change Detection - Path Injection

   This is a security problem and is discussed in Section 12.2.

9.  Algorithm Considerations

   The availability of a PAN layer provides additional information that
   can be used by algorithms for congestion control, RTT estimation, MTU
   estimation, ... and others.  It also requires additional algorithms,
   for example, for path selection.

   The additional information includes: - path metadata with route
   information, including MTU and hardware limits on bandwidth and
   latency. - comparability of multiple paths which gives knowledge
   about shared links/routers between paths.

9.1.  MTU Detection

   MPU detection algorithm can be removed/replaced with metadata query
   See Path MTU Discovery in Section 14.3 of [QUIC-TRANSPORT] and
   Section 5.8 of [QUIC-MP].

9.2.  Congestion Control

   Congestion control (CC) algorithms can benefit from exact knowledge
   of a path:

   *  When using multiple paths, a CC algorithm can access information
      as to if and where the paths overlap and some of the properties of
      the overlapping sections.

   *  If implemented by the QUIC-MP library, a CC algorithm can be
      notified of every path change, allowing it to reset only when
      necessary.  Without a PAN layer, a CC algorithm has to rely on
      4-tuple changes to trigger a reset, with the drawback that changes
      may go unnoticed (in case of path change without 4-tuple change)
      or that a reset may be unnecessary (in case only the NAT mapping
      changed while leaving the rest of the route intact).

   See also Section 5.3 of [QUIC-MP].

   General recommendations for congestion control are defined in
   Congestion Control Principles [CC-PRINCIPLES].  Congestion control
   for QUIC is discussed in QUIC Loss Detection and Congestion Control
   [QUIC-RECOVERY].  More generally, congestion control for UDP is
   discussed in the UDP Usage Guidelines [UDP-GUIDELINES].  UDP MTU
   discovery is further developed in [MTU-DISCOVERY].

9.2.1.  Coupled Congestion Control

   Multipath congestion control is also discussed for TCP in
   [CC-MULTIPATH-TCP].  They state that:

      "One of the prominent problems is that running existing algorithms
      such as standard TCP independently on each path would give the
      multipath flow more than its fair share at a bottleneck link
      traversed by more than one of its subflows.".

   This can be avoided in PANs through link-level analysis of flows and
   selecting paths that do not create or share a bottleneck link.  This
   avoids the need for traditional Coupled Congestion Control.  Instead,
   this bottleneck knowledge may be used to effectively use separate
   congestion control for each path, or at least let coupled congestion
   control focus on known bottlenecks links.

   Note that in the case of SCION, it uses different paths from IP.
   While some of the links may carry both IP and SCION traffic, the
   SCION traffic typically has its own bandwidth allocation.

   There are several congestion control algorithms proposed in
   literature, e.g. LIA, OLIA, BALIA and RSF.  These combine congestion
   control with path selection algorithms.  For simplicity, we suggest
   separating concerns in terms of congestion control and path
   selection.  This allows us to better tailor the solutions to the
   different usage scenarios.

   The proposition is to use non-coupled congestion control per path,
   tailored for each use case (max bandwidth / low latency) and on top
   of that separately use path selection algorithms.

9.3.  RTT Estimation

   *  Must reset on path change (how?).  See also from Section 5.1 of
      [QUIC-MP]: "If path validation process succeeds, the endpoints set
      the path's congestion controller and round-trip time estimator
      according to Section 9.4 of [QUIC-TRANSPORT]."

   *  Section 5.4 of [QUIC-MP] describes how data packets and
      acknowldegment packets may be sent on different paths, making it
      difficult to detemine the RTT.

      -  With PANs, the path is known, so it is easy to tell whether
         data and acknowledgment were sent on the same path or not.

      -  With PANs, we could recommend a policy (*TODO recommend?*) that
         ACKs should be sent on the return path of the data (*TODO* why
         are they sent on different paths?  Besides path abandon?)

      -  With PANS, explicit path probing is easier.

      -  We can try to derive lower and upper limits from analyzing
         latency of non-disjoint paths.

   *  Should benefit from knowledge about minimum latency expected on a
      path, see Section 3.1.

   *  This allso affects packet scheduling, see Section 5.5 of
      [QUIC-MP].

   *TODO* Has this the same purpose as RTT estimation?

   *  Latency polling

      -  How bad is latency polling?

      -  Traceroute can help to reduce polling (ideally, every link is
         traversed only by one poll packet).  Traceroute also allows
         identifying links with high variance or generally high latency.

      -  An implementation should avoid sending too many polling packets
         at once, see Section 7.2 of [QUIC-MP].

9.4.  Retransmission & PTO

   See Section 5.6 of [QUIC-MP] and Section 5.7 of [QUIC-MP].

9.5.  DMTP

   One example of an application / algorithm is discussed in [DMTP].

9.6.  Path Selection

9.6.1.  Dynamic Approach

   A dynamic approach could start with using low latency paths.  If the
   connection appears to be long lasting (e.g. at least 1 second
   duration and 1MB of traffic) it could start, and keep, adding
   additional paths and as long as the traffic increases.  Additional
   paths can be chosen following the guidelines discussed in
   Section 10.1.

9.6.2.  Bottleneck Detection

   If no live traffic information is available, bottleneck detection can
   help to identify linkks that should be avoided.  In PAN this can be
   done using approaches such as [UMCC].

   One alternative is to use two SCMP traceroute commands that measure
   latency between two consecutive AS border routers.  The measured
   latency can be compared to earlier measurements or to the latency
   given in the path metadata.  Discrepancies can be an indication of
   high traffic and queueing problems on the measured link.

   *TODO* Should we discourage this?  It creates unnecessary traffic...

9.7.  Packet Scheduling

   Packet scheduling algorithms are mainly useful for high bandwidth
   (HBW) scenarios.  Latency may still be relevant though, for example,
   for high definition video streams.  Scheduling helps distributing the
   transfer load efficiently over multiple paths.

   However, sending data streams over multiple paths in parallel will
   usually result in packets arriving out of order at the receiver.
   This should be avoided because:

   *  Packet reordering requires larger buffers on the receiver side
      which are used to put packets back in order.  Latency, jitter and
      drop rate on different paths directly affect the required buffer
      size.

   *  Head of line blocking (HOLB): the latency of the slowest packet
      determines the effective latency of the stream.  This may be
      ignored for data transfers where latency is irrelevant.

   These problems can be mitigated, but it is difficult to do so for
   both problems at the same time.  A simple way to mitigate these
   problems is to select multiple paths with similar latency.

   Another way to mitigate these problems is to schedule packets on
   different paths such that they are likely to arrive in (more or less)
   the correct order.  Care should be taken to avoid requiring an
   equally large buffer on the sender side.

   *TODO* Check which existing algorithms do that.

   *TODO* Can we facilitate QUIC streams for this?

10.  Applications

   See also Section 4. *TODO merge with Categories?*

10.1.  Data Transfer

   The aim of a data transfer application is to maximize throughput,
   regardless of latency, jitter or packet loss.

   The solution here is to identify multiple paths that are either
   disjoint, or where the non-disjoint links allow higher throughput
   than other links on the same paths (i.e. high enough to prevent the
   link from being a bottleneck).

10.2.  Low Latency

   There are multiple approaches to identify low latency paths.  For
   example:

   1) Rely only on metadata.  This is the fastest approach and may give
   a path that is already "good enough".

   2) Traceroute on a few selected paths.  Traceroute gives latencies
   for each segment.  By considering overlapping linnk in known paths,
   the paths for traceroutes can be selected such that a minimum of
   traceroutes provides latency onformation for a lorge number of links.
   These links can then be used to select the most promising path.

   Traceroute also has the advantage that it does not put load on the
   server.

   However, traceroute may not give information for the last mile to the
   remote endpoint.

   3) Use RTT estimation, see Section 9.3.

   4) With implicit measurements through QUIC ACK frames.  Section 13.2
   of [QUIC-TRANSPORT] recommends sending an ACK frame after receiving
   at least two ack-eliciting packets or after a delay.  If the
   application sends data on multiple paths in parallel, this may be
   sufficient for some low latency applications.  [QUIC-ACKFREQUENCY]
   proposes an extension that allows more control over how often and
   when ACK-FRAMES are sent.  This approach can be useful if
   [QUIC-ACKFREQUENCY] becomes available or if the ACK behavior of the
   standard QUIC server is sufficient.

   5) Deadline aware multipathing is described in [DMTP].

   Generally, instead of probing many paths at once, an implementation
   should probe only the most promising paths (following the metadata).
   This should allow excluding many other paths if their metadata
   latency (which should represent best-case latency) is larger than any
   latency measured on the previously selected paths.

   Probing too many paths should also be avoided to avoid overloading
   individual links, and it may effectively be limited (except
   traceroute) by the abvailable path IDs and connection IDs, see
   Section 7.2 of [QUIC-MP].

10.3.  High Availability / Redundancy

   An approach to high availability is to send data on multiple paths in
   parallel.  A tradeoff here is that sending on all available paths may
   be infeasible because of the number of available paths (with SCION we
   often see 100+ paths to a destination).  Depending on cost factors,
   and to avoid overloading the network, any algorithms should keep
   redundant sending to a minimum.  See also Section 7.2 of [QUIC-MP]
   for DoC security considerations.

   Path analysis can be used to identify multiple paths that are mostly
   or completely (using multiple interfaces) disjoint, but that still
   satisfy latency, bandwidth, and other constraints.

   Additional polling with SCMP or with an additional QUIC stream may be
   used to regularly measure packet drop rates or latency variations.

10.4.  Multipathing for Anonymity

   Multipathing could also be used for anonymity, e.g., by switching
   paths at random intervals.  With a continuous data stream, care
   should be taken that new paths are not just switched over from one to
   the next, otherwise traffic characteristics may be used to identify
   paths.  For example, paths could be identified by packet frequency,
   packet burst frequency, or general bandwidth.  For continuous
   streams, just moving one stream from one path to another may expose
   stream identity.

   As mitigation, a sender could start sending on a new path for a while
   before stopping sending on the old path.  The sender could send
   redundant data or random data at a suitable bandwidth.

   *TODO* Should we really recommend bandwidth usage.

   *TODO* Is this SCION specific?  SCION allows for choosing paths based
   on trusted or untrusted ASes, but this is not specific to
   multipathing...

11.  Summary of Recommendations

   *TODO* This memo is informational but we have some MUST and SHOULD
   here.

   *  MUST: Enforce endpoint identity by requiring QUIC-MP
      implementations to provide a destination network address instead
      of just a IP/port.

   *  SHOULD (MUST?): The SCION stack should not store/cache paths,
      especially (<UST?) not on the server side.  This prevents memory
      exhaustion attacks, see {attack-memory-exhaustion}

   *  MUST: Enable QUIC-MP implementations to recognize network path
      changes beyond 4-tuple changes.  This protects against several
      attacks, see Section 12.2.  This also ensures that we are only
      using paths of packets that have been accepted by the QUIC(-MP)
      layer or above.

   *  MUST: SCION stack should by default not change the network paths,
      possibly with the exception of refreshing expired paths.  When a
      path stops working (link errors, etc), it should instead report an
      error to the QUIC(-MP) layer or time out silently.

   *  A server should return packets on the same path on which they were
      received.

      -  Generally a server SHOULD respond on the same path on which the
         data was originally requested, unless the new path has been
         validated.  This ensures that the path does not violate the
         path policy of the client.

      -  If a path fails / expires, we can use other established path
         but the server SHOULD NOT try opening new path.  This may
         violate a client's path policy.

      -  Returning probing packets on the same network path on which
         they were received: this greatly simplifies RTT estimation, see
         Section 9.3

   *  Section 12.3: servers should/must authenticate paths. *TODO*

   Possible workaround: port/address mangling?

   Future: how to handle dynamic traffic data?  This requires anyway a
   tighter integration if CC algorithms.

11.1.  Address Validation Token

   *TODO* See discussion in https://github.com/quicwg/multipath/
   issues/550

   From Section 3.1.3 of [QUIC-MP]: > As specified in Section 9.3 of
   [QUIC-TRANSPORT], a server is > expected to send a new address
   validation token to a client > following the successful validation of
   a new client address. > The client will receive several tokens.  When
   considering using a > token for subsequent connections, it may be
   difficult for the > client to pick the "right" token among multiple
   tokens obtained in > a previous connection. > The client is likely to
   fall back to the strategy specified in > Section 8.1.3 of
   [QUIC-TRANSPORT], i.e., pick the last received > token.  To avoid
   issues when clients make the "wrong" choice, a > server SHOULD issue
   tokens that are capable of validating any of > the previously
   validated addresses.  Further guidance on token usage > can be found
   in Section 8.1.3 of [QUIC-TRANSPORT].

   Clients may not know their IP address (e.g. NAT) and their IP address
   may change.

   As discussed (*TODO* elsewhere: trigger path validation, reset CC and
   RTT estimation algorithms), QUIC-MP implementations should consider
   not only the 4-tuple, but also the AS codes and actual paths when
   comparing network addresses.

   One problem here is as follows: If we adopt an implementation to use
   the full network address + path for identity, and if we use this to
   generate tokens, then we may end up generating many more or longer
   tokens.

   This needs to be considered carefully.

   See also Section 21.3 of [QUIC-TRANSPORT].

   *TODO* Move this section to _after_ discussing network addresses

   *TODO* read the referenced sections and come up with recommendations.

12.  Security Considerations

   THe aim is that [QUIC-MP] over PANs retains all security properties
   of [QUIC-MP].  However, this requires some implementation changes and
   additional consideration regarding:

   *  endhost identity: a 4-tuple is not sufficient to identify an
      endhost;

   *  netwotk path authenticity: paths may be spoofed;

   *  probing patterns which may expose user intentions or identity.

12.1.  Probe Fingerprinting

   An endpoint may probe multiple paths in order to determine the best
   path(s) for a given usecase.  One example of probing packets are
   packets that measure round trip time (RTT).

   If sent en block, probing packets can be detected because they may be
   sent in bulk, to the same destination, in regular intervals, and all
   with slightly different paths attached.

   This can be used to fingerprinting an endpoints or their intentions
   (applications may have unique intervals definded).

   This can be mitigated by varying and generally reducing the number of
   probing packets, and by sending probing packets not en block but
   time-shifted.

12.2.  Path Injection

   There are several potential attacks that build on injecting paths
   (valid or invalid) into server-side software stack.

   These attacks can be prevented in several ways, we recommend the
   following where possible:

   1.  PAN layers should avoid storing/caching paths and network
       addresses (beyond IP/port) internally.  Instead, they should be
       given to the QUIC(-MP) layer or the application layer.  That
       means that path information would only be accepyted and retained
       if the QUIC(-MP) or application layer.

   2.  PAN layers and QUIC(-MP) layers should interface by using network
       addersses that include all information that identifies an
       andpoint, including, for example, AS code.  Any change to a
       network address (including the AS code) should trigger path
       validation.

   Alternatives: 1.  If paths and network addresses must be stored in
   the PAN layer, an alternative solution would be to implement some
   kind of signalling which would indicate that a packet is (or would
   be) rejected/dropped by the QUIC(-MP) layer.  These addresses and
   path from such packets should not be added to storage.  However, to
   avoid connection drop, they should not be removed if they were
   previously used with a valid connection.

   Examples of attacks include memory exhaustion attacks, traffic
   redirection attacks, and traffic amplification attacks.

12.2.1.  Memory Exhaustion

   An attacker may flood a server with packets that each have a
   different source network address.  If these are stored in the PAN
   layer, they may cause memory exhaustion.

   Mitigation: do not store state in the PAN layer, or implement a way
   to clean up state without affecting valid connection.

12.2.2.  Traffic Redirection to Different AS

   An attacker may craft a packet that appears to originate from the
   same IP/port, but is located in a different AS than an existing
   connection.  If the server's PAN layer stores paths internally, and
   uses IP/port as key to look them up, then the new paths may replace
   the exisitng one and outgoing traffic is redirected to the new paths
   and destination.

   Mitigation:

   *  The QUIC(-MP) layer MUST trigger path validation if the network
      address changes, and must consider every attribute of the address,
      not just IP and port.

   *  If a packet is rejected by the QUIC(-MP) layer, the PAN layer MUST
      NOT add it to any local state (including not replacing exisint
      state).  This can be achieved trivially by not having state in the
      PAN layer.

12.2.3.  Traffic Redirection over Different Path

   An attacker may craft a path with a network address that is identical
   to an existing valid client, but with a different path.

   The new route is invalid (contains loops or non-existent links) or
   may be broken (contains links that are broken or have high latency or
   drop rate).

   The new route may also work fine, but violate the client's path
   policy or be used for traffic observation.

        AS #100               AS #200                   AS #300
      +------------+        +----------------+        +----------------+
      | Server     |        | Attacker       |        | Victim         |
      | IP=1.2.3.4 | ------ | IP=192.168.0.1 | ------ | IP=192.168.0.1 |
      | port = 42  |        | port= 12345    |        | port= 12345    |
      +------------+        +----------------+        +----------------+

       **TODO** use IPs from documentation range

                    Figure 1: Example of non-unique IPs

   This attack requires either spoofing of the client's IP address (when
   the attacker is in the same AS as the client) or injection of a path
   (which requires control over an AS that is en-route between the
   client and server).

   Mitigation: *TODO*

12.2.4.  Traffic Amplification

   An attacker may establish a normal connection with a server, request
   a large amount of data, and then inject a path that redirects to a
   victim that has the same IP/port, but in a different AS.

   If the server-side QUIC-MP does not trigger path validation (because
   IP/port are the same), then it may implicitly accept the new path and
   send the requested data to a victim.

   This attack requires the attacker to have control over an AS that is
   en-route between client (victim) and server.

   Mitigation:

   *  A QUIC(-MP) library must consider all attributes (not just the
      4-tuple) when checking for a change in the network address.  This
      would then trigger path validation and the attack can be averted.

   *  If a QUIC(-MP) library cannot compare additional attributes (e.g.
      legacy library), the PAN layer (server side) should have an option
      to perform port mangling or IP mangling: when the PAN layer
      detects a new network address that differs only in the AS number
      from a previously seen address (IP/port are the same), then it
      should perform IP/port mangling, i.e. reporting a modified IP or
      port to the QUIC(-MP) layer.  This new IP/port would trigger a
      path validation or algorithm reset where required.

   Caveats

   *  Offering a mangeled IP/port to the application may have
      implications for application correctness, such as displaying an
      unexpected IP/port.

      Attacker                                                Server
      (Establish connection)
      Path=[#200, #100] -->
                                                   <-- Path=[#100, #200]

      (Change Path)
      Path=[#300, #200, #100] -->
                                             <-- Path=[#100, #200, #300]

      Client: receives unwanted traffic

             Figure 2: Example of traffic amplification attack

12.3.  Jelte's Attack

   *TODO*

12.4.  More ?

   *  Use multipathing for anonymity, see EVA in Section 4.

   *  See other attacks in Section 7.2.4 of [SCION-CP]?

   *TODO*

13.  IANA Considerations

   This document has no IANA actions.

14.  References

14.1.  Normative References

   [CC-ALGORITHMS]
              Duke, M., Ed. and G. Fairhurst, Ed., "Specifying New
              Congestion Control Algorithms", BCP 133, RFC 9743,
              DOI 10.17487/RFC9743, March 2025,
              <https://www.rfc-editor.org/rfc/rfc9743>.

   [CC-PRINCIPLES]
              Floyd, S., "Congestion Control Principles", BCP 41,
              RFC 2914, DOI 10.17487/RFC2914, September 2000,
              <https://www.rfc-editor.org/rfc/rfc2914>.

   [DCCP-UDPENCAP]
              Phelan, T., Fairhurst, G., and C. Perkins, "DCCP-UDP: A
              Datagram Congestion Control Protocol UDP Encapsulation for
              NAT Traversal", RFC 6773, DOI 10.17487/RFC6773, November
              2012, <https://www.rfc-editor.org/rfc/rfc6773>.

   [MPTCP-ARCHITECTURE]
              Ford, A., Raiciu, C., Handley, M., Barre, S., and J.
              Iyengar, "Architectural Guidelines for Multipath TCP
              Development", RFC 6182, DOI 10.17487/RFC6182, March 2011,
              <https://www.rfc-editor.org/rfc/rfc6182>.

   [MTU-DISCOVERY]
              Fairhurst, G., Jones, T., Tüxen, M., Rüngeler, I., and T.
              Völker, "Packetization Layer Path MTU Discovery for
              Datagram Transports", RFC 8899, DOI 10.17487/RFC8899,
              September 2020, <https://www.rfc-editor.org/rfc/rfc8899>.

   [QUIC-RECOVERY]
              Iyengar, J., Ed. and I. Swett, Ed., "QUIC Loss Detection
              and Congestion Control", RFC 9002, DOI 10.17487/RFC9002,
              May 2021, <https://www.rfc-editor.org/rfc/rfc9002>.

   [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., "Using TLS to Secure
              QUIC", RFC 9001, DOI 10.17487/RFC9001, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9001>.

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [UDP-GUIDELINES]
              Eggert, L., Fairhurst, G., and G. Shepherd, "UDP Usage
              Guidelines", BCP 145, RFC 8085, DOI 10.17487/RFC8085,
              March 2017, <https://www.rfc-editor.org/rfc/rfc8085>.

14.2.  Informative References

   [CC-MULTIPATH-TCP]
              Raiciu, C., Handley, M., and D. Wischik, "Coupled
              Congestion Control for Multipath Transport Protocols",
              RFC 6356, DOI 10.17487/RFC6356, October 2011,
              <https://www.rfc-editor.org/rfc/rfc6356>.

   [DMTP]     John, T. and T. Riechard, "Deadline Aware Streams in QUIC
              Multipath", Work in Progress, Internet-Draft, draft-tjohn-
              quic-multipath-dmtp-01, 5 June 2025,
              <https://datatracker.ietf.org/doc/html/draft-tjohn-quic-
              multipath-dmtp-01>.

   [OLIA]     Khalili, R., Gast, N., Popovic, M., Upadhyay, U., and J.
              Le Boudec, "MPTCP is not pareto-optimal: performance
              issues and a possible solution", Proceedings of the 8th
              international conference on Emerging networking
              experiments and technologies, ACM , 2012.

   [PATH-VOCABULARY]
              Enghardt, R. and C. Krähenbühl, "A Vocabulary of Path
              Properties", RFC 9473, DOI 10.17487/RFC9473, September
              2023, <https://www.rfc-editor.org/rfc/rfc9473>.

   [QUIC-ACKFREQUENCY]
              Iyengar, J., Swett, I., and M. Kühlewind, "QUIC
              Acknowledgment Frequency", Work in Progress, Internet-
              Draft, draft-ietf-quic-ack-frequency-11, 28 February 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              ack-frequency-11>.

   [QUIC-MP]  Liu, Y., Ma, Y., De Coninck, Q., Bonaventure, O., Huitema,
              C., and M. Kühlewind, "Multipath Extension for QUIC", Work
              in Progress, Internet-Draft, draft-ietf-quic-multipath-14,
              23 April 2025, <https://datatracker.ietf.org/doc/html/
              draft-ietf-quic-multipath-14>.

   [SCION-CP] de Kater, C., Rustignoli, N., and S. Hitz, "SCION Control
              Plane", Work in Progress, Internet-Draft, draft-dekater-
              scion-controlplane-08, 3 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-dekater-
              scion-controlplane-08>.

   [SCION-DP] de Kater, C., Rustignoli, N., Hugly, J., and S. Hitz,
              "SCION Data Plane", Work in Progress, Internet-Draft,
              draft-dekater-scion-dataplane-05, 3 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-dekater-
              scion-dataplane-05>.

   [UMCC]     Gartner, M. and D. Hausheer, "UMCC: Uncoupling Multipath
              Congestion Control through Shared Bottleneck Detection in
              Path-Aware Networks", Proceedings of the IEEE 49th
              Conference on Local Computer Networks (LCN) , 2024.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Jelte van Bommel
   ETH Zurich
   Email: jelte.vanbommel@inf.ethz.ch


   Francois Wirz
   ETH Zurich
   Email: wirzf@inf.ethz.ch


   Tilmann Zaeschke (editor)
   ETH Zurich
   Email: tilmann.zaeschke@inf.ethz.ch
