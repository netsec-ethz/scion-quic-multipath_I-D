



PANRG                                                      J. van Bommel
Internet-Draft                                                   F. Wirz
Intended status: Informational                          T. Zaeschke, Ed.
Expires: 8 November 2025                                      ETH Zurich
                                                              7 May 2025


         Guidelines for QUIC Multipath over Path Aware Networks
               draft-zaeschke-scion-quic-multipath-latest

Abstract

   This document provides guidelines for using the Multipath Extension
   for QUIC [QUIC-MP] with path aware networks (PAN).  PANs may provide
   hundreds of paths between endpoint, including detailed path metadata
   that facilitates an informed selection.  This offers opportunities
   for new or improved algorithms for multipath networking.

   This document discusses mostly algorithms for path selection.
   However, it also comments on congestion control and load distribution
   (scheduling), as well as general considerations for API design and
   applications that use multipath QUIC over SCION.

   *TODO*

   *  Section on QUIC-specific advantages?

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at https://netsec-
   ethz.github.io/scion-quic-multipath_I-D/draft-zaeschke-scion-quic-
   multipath.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-zaeschke-scion-quic-
   multipath/.

   Discussion of this document takes place on the WG Working Group
   mailing list (mailto:panrg@irtf.org), which is archived at
   https://datatracker.ietf.org/rg/panrg.  Subscribe at
   https://www.ietf.org/mailman/listinfo/panrg/.

   Source for this draft and an issue tracker can be found at
   https://github.com/netsec-ethz/scion-quic-multipath_I-D.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
     1.1.  SCION
     1.2.  Terminology
   2.  Conventions and Definitions
   3.  API Coinsiderations
   4.  QUIC implementation Considerations
     4.1.  Path Change Detection
       4.1.1.  Problem
       4.1.2.  Implication
       4.1.3.  Mitigation
     4.2.  Padding
   5.  Algorithm Considerations
     5.1.  General
     5.2.  Algorithms
   6.  Multipath Features
     6.1.  Path Metadata
       6.1.1.  Path Metadata Granularity
       6.1.2.  Path Metadata Dimensions
       6.1.3.  Path Metadata Liveliness
       6.1.4.  Path Metadata Reliability
     6.2.  Path Selection
   7.  OLD PART BELOW - IGNORE
   8.  Multipath Categorization
     8.1.  Disjunctness
     8.2.  Path Metadata
   9.  Algorithms
     9.1.  Path Selection
       9.1.1.  Dynamic Approach
       9.1.2.  Bottleneck Detection
     9.2.  MTU
     9.3.  Detecting Byzantine ASes and Links
     9.4.  DMTP
     9.5.  Congestion Control
     9.6.  Load Distribution (Scheduling)
   10. Applications
     10.1.  Data Transfer
     10.2.  Low Latency
     10.3.  High Availability / Redundancy
     10.4.  Multipathing for Anonymity
   11. API Design consideration
     11.1.  Multipathing for Applications
     11.2.  Algorithm Integration
   12. Security Considerations
     12.1.  Latency Polling
     12.2.  Path Validation
     12.3.  More ?
   13. IANA Considerations
   14. References
     14.1.  Normative References
     14.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Path aware networks (PAN) can provide many detailed metadata about
   available paths, such as latency, bandwidth, MTU, geographic
   location, or many other properties.

   Even when just one path is used, this allows selecting the best path
   for each use case while providing a suitable backup paths if the
   first paths fails or becomes unatractive.

   In the case of concurrent multipathing, detailed metadata provides
   information about any links where different paths overlap and about
   the properties of these links.  This allows, for example, choosing
   paths such that they don't share low bandwidth links.

   This is useful for developing or improving network related
   algorithms, for example for path selection, or more informed
   algorithms for congestion control.

   This document first identifies and categorizes multipath usage
   scenarios (Section 8), then discusses guidelines for path selection
   algorithms and suggests how these may be applicable to congestion
   control algorithms, without discussing the later in detail
   (Section 5.2).  Finally, in order to facilitate these algorithms,
   this documents contains suggestions for API design and general use in
   applications (Section 11).

   As a practical example of a PAN and how path metadata can be made
   available and path selection and routing can be implemented, we refer
   to the SCION [SCION-CP], [SCION-DP].

1.1.  SCION

   One example of a PAN is SCION [SCION-CP], [SCION-DP].  SCION is an
   interdomain routing protocol that provides path metada on the level
   of individual router interfaces.  This provide many opportunities for
   improving congestion control and other algorithms.  They also avoid
   some problems that gave rise to current algorithms.

   The SCION protocol makes detailed path information available to
   endpoints.  Besides the 4-tuple of address/IP at each endpoint, the
   information includes a list of all traversed ASes and respective
   links between ASes, as well as metadata about ASes and links,
   including MTU, bandwidth, latency, AS internal hopcount, or
   geolocation information.

1.2.  Terminology

   *Autonomous System (AS)*: An autonomous system is a network under a
   common administrative control.  For example, the network of an
   Internet service provider or organization can constitute an AS.

   *Endpoint*: An endpoint is the start or the end of a path, as defined
   in [PATH-VOCABULARY].

   *Inter AS link*: A direct link between two external interfaces of two
   ASes.

   *Intra AS link*: A direct link between twi internal interfaces of a
   single AS.  A direct link may contains several internal hops.

   *Link*: General term that refers to "inter-AS links" and "intra-AS
   links".

   *Path*: Consists of a 4-tuple of address/IP at each endpoint, a list
   of all traversed ASes, and links inside and between ASes, including
   interface IDs on border routers of each AS.

   *Path metadata*: Path metadata is additional data that is available
   to clients when they request a selection of paths to a destination.
   Path metadata is authenticated wrt to owner of each link, but
   otherwise not verified.  Path metadata includes data about ASes and
   links, such as MTU, bandwidth, latency, AS internal hopcount, or
   geolocation information.  Path metadata is stable, e.i. it is updated
   infrequently, probably at most once per hour.  Properties such as
   bandwidth and latency therefore represent hardware properties rather
   than live traffic information.

   *SCMP*: A signaling protocol analogous to the Internet Control
   Message Protocol (ICMP).  This is described in [SCION-CP].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  API Coinsiderations

   *  Expose Path ID

   *  Expose API for custom congestion control algorithms

   *  Expose callback for QUIC-MP path abandon (REFERENCE!!!)

   *  Expose API for name resolution (only of library does that), not
      useful if API works with IP/port only.

4.  QUIC implementation Considerations

   *TODO READ:* See also "Implementation Considerations" in Section 5 of
   [QUIC-MP].

4.1.  Path Change Detection

4.1.1.  Problem

   Following Section 5.1 of [QUIC-MP] and Section 9 of [QUIC-TRANSPORT],
   endpoints MUST drop a connection or perform path validation when the
   4-tuple changes:

      "Not all changes of peer address are intentional, or active,
      migrations.  The peer could experience NAT rebinding: a change of
      address due to a middlebox, usually a NAT, allocating a new
      outgoing port or even a new outgoing IP address for a flow.  An
      endpoint MUST perform path validation (Section 8.2 of
      [QUIC-TRANSPORT]) if it detects any change to a peer's address,
      unless it has previously validated that address."

   With SCION, endpoints may use private IPs that are not globally
   unique, such as 192.168.0.1.  Two paths with an identical 4-tuple may
   therefore connect to two different machines if the machines are in
   different ASes but use the same IP/port.

   *TODO remove the following, it is probably wrong.*

   In short, an attacker can impersonate a client by using an identical
   IP/port to connect a server.  The server would probably just reverse
   the path and answer to the client without triggering a path
   validation.

   *TODO* What is the implication of this?

   Redicrection attack:

   *  Can an attacker, without having being able to encrypt/decrypt
      data, cause any harm?  Can they redurect traffic to themselves?
      To prevent this, the server SCION stack should accept a new path
      only if the QUIC stack also accepts it!  This means we need to
      trigger a path validation and somehow learn whether it worked.  Or
      we use our own validation process.  Or we don't allow the path to
      change and require a new QUIC connection (with a new SCION
      connection)?  SOLUTION: The SCION layer MUST NOT cache paths
      locally, instead paths must be accepted by the QUIC layer before
      being used.

   Examples: * Java over DatagramChannel: * Comparing ResponsePath
   objects MUST return false if the paths differ.  * The QUIC layer MUST
   use only those addresses for sending data that have previously been
   accepted.  If an attacker sends a packet, it should be identified as
   malicious, be rejected, and the path should not be used.  Why would
   an attacker packet be accepted?  Replay should be impossible (there
   are apcket sequence IDs?), and any other requests should be
   cryptographically protected.  Can this attack be successful with
   spoofed IPs??? * Java over DatagramSocket: Problematic, it caches the
   paths... * C + Rust: How exactly do we map PathID to paths?  How are
   paths updated?

4.1.2.  Implication

   Path change detection is important for: - triggering a reset of
   congestion control and RTT estimation algorithms, see Section 9.4 of
   [QUIC-MP] - triggering path validation, see Section 9 of
   [QUIC-TRANSPORT].  *TODO Better understand the impact of this*

4.1.3.  Mitigation

   *  Allow to detect path changes while 4-tuple stays the same

      -  Port mangling?

      -  Change PATH-ID (SCION would need to know about QUIC...!!)

      -  Is PATH ID encrypted?  Then attacker cannot know it (but use,
         it, see replay, which is not possible due to sequence
         numbers??) ... so what?

      -  SCION could just drop packets where 4-tuple is the same but
         remote AS has changed.

      -  SCION could trigger a "double" path validation by changing the
         port/IP to a made up value and back to the original value.
         This would trigger two path validations.  However, at least
         eventually, the QUIC layer will know the correct remote IP/
         port.

4.2.  Padding

   From Section 8.1 of [QUIC-TRANSPORT]: "Clients MUST ensure that UDP
   datagrams containing Initial packets have UDP payloads of at least
   1200 bytes, adding PADDING frames as necessary."

   PAN packets may be bigger than traditional packets because they may
   carry additional routing information.

   *TODO* Measure SCION path header!

5.  Algorithm Considerations

   What has changed: - Much better MPU - Knowledge about shared links/
   routers between paths - indication of latency+bandwidth limits. -
   (Potentially live traffic info: Avoid "pulsing" -> Simon Scherer?)

5.1.  General

   [QUIC-TRANSPORT] requires that there is no connection migration
   during the initial handshake, and that there are no other packets
   send (including probing packets) during the initial handshake, see
   Section 9 of [QUIC-TRANSPORT], paragraphs 2 and 3.

   We need to ensure on some level that no path change or probing
   occurs.

   *TODO* Read [QUIC-MP] on 4-tuple change / path validation. ->
   Section 9 in RFC 9000

5.2.  Algorithms

   *  MPU detection algorithm can be removed/replaced with metadata
      query

   *  Congestion control algorithms:

      -  Must reset on path change (how?).

      -  Should benefit from knowledge about path overlaps.

   *  Roundtrip time estimator.

      -  Must reset on path change (how?).  See also from Section 5.1 of
         [QUIC-MP]: "If path validation process succeeds, the endpoints
         set the path's congestion controller and round-trip time
         estimator according to Section 9.4 of [QUIC-TRANSPORT]."

      -  Should benefit from knowledge about minimum latency expected on
         a path.

   *  Path selections algorithms

   *  Latency polling

      -  How bad is latency polling?

      -  Traceroute can help to reduce polling (ideally, every links is
         traversed only by one poll packet).  Traceroute also allows to
         identify links with high variance or generally hogh latency.

6.  Multipath Features

   This document discusses multipath features that are available in
   SCION [SCION-CP], [SCION-DP].  However, the discussion is kept
   general and relevant to all PAN that support these features.

6.1.  Path Metadata

   We assume that path metadata is reflects hardware properties rather
   than live traffic information (especially for bandwidth and latency).
   One should not expect path metadata is updated to be more than once
   every hour.  Path metadata is disseminated together with paths, so
   its freshness depends on the path livetime, wgich can be several
   hours.

6.1.1.  Path Metadata Granularity

   We assume a protocol for inter-AS routing that provides path
   information per AS, more specifically per border router of an AS and
   per any link between any border routers (link may be internal or
   external to an AS).

   That means, if we compare multiple paths, we can see where they
   overlap and what the hardware characteristics of the overlapping
   parts are.

6.1.2.  Path Metadata Dimensions

   We assume a protocol a provides information on links and border
   routers, such as MTU, bandwidth, latency, geo-location, as well as
   identities (interface ID, port and IP) of border routers.  We assume
   the data is static, which means that bandwidth and latency reflect
   hardware characteristics rather than current or recent load.

6.1.3.  Path Metadata Liveliness

   We assume that path metadata is updated at most every few hours.
   This should be more than sufficient since all values reflect hardware
   properties rather than current traffic load.

6.1.4.  Path Metadata Reliability

   We assume that all values are correct.  The metadata is
   cryptographically protected.  It is signed by the data originator,
   which is the relevant AS owner.  However, the data correctness is not
   verified, instead we rely on the AS owner to be honest.

6.2.  Path Selection

   We assume that a PAN protocol allows selecting paths explicitly,
   based, for example, on path metadata.  Paths can be added and removed
   from a connection.  Paths may have a best-before data and may expire,
   after which they are invalid.

7.  OLD PART BELOW - IGNORE

8.  Multipath Categorization

   This document distinguishes the following usage categories:

   *  High bandwidth (BW): Optimizing bandwidth by parallel transfer on
      multiple paths.

   *  Minimum latency (LAT): Optimizing latency for low latency.  This
      can be achieved by regularly checking multiple paths and using the
      one with the lowest latency or by parallel transmission over
      multiple path.

   *  Failure tolerance (FT): Optimizing for failure tolerance by
      parallel transfer on multiple paths.

   *  Evasion (EVA): Avoid certain links or ASes, for example based on
      MTU, geolocation or AS number.

   The discussions of these categories are written with multiple paths
   per interface in mind (i.e. multiple paths per 4-tuple).  However,
   they can usually be generalized to multipathing over multiple
   interfaces.

   These categories can be combined, for example LAT and FT may often be
   combined and EVA can be can be useful in combination with any other
   category.

8.1.  Disjunctness

   For FT, paths are only interesting if they are disjunct.  For BW,
   paths should mostly be disjunct, but overlap is acceptable if the
   overlapping links have high BW available (see Section 9.1.2).

   For LAT and EVA, path disjunctness is mostly irrelevant.

   *TODO* Discuss link level, router level and AS level path
   disjunctness.

8.2.  Path Metadata

   SCION paths have associated metadata with latency and bandwidth
   information.  The values represent best case values and tend to be
   updated rarely, for example once a day.

   Path metadata may also be incomplete, ASes are not required to
   provide or regularly update the data.

   Users of path metadata must keep in mind that the data is mostly not
   verifiable but depends on the diligence and trustworthiness of the
   link owners.  However, once disseminated by a link owner, the path
   metadata is authenticated an cannot be changed by other parties.

   Due to the inherent unreliability, users should implement sanity
   checks as to whether a link holds up to the promised capabilities.

9.  Algorithms

9.1.  Path Selection

9.1.1.  Dynamic Approach

   A dynamic approach could start with using low latency paths.  If the
   connection appears to be long lasting (e.g. at least 1 second
   duration and 1MB of traffic) it could start adding additional paths
   and see whether the traffic increases.  Additional paths can be
   chosen following the guidelines discussed in Section 10.1.

9.1.2.  Bottleneck Detection

   If no live traffic information is available, bottleneck detection can
   help to identify linkks that should be avoided.  In PAN this can be
   done using approaches such as [UMCC].

   One alternative is to use two SCMP traceroute commands that measure
   latency between two consecutive AS border routers.  The measured
   latency can be compared to earlier measurements or to the latency
   given in the path metadata.  Discrepancies can be an indication for
   high traffic and queueing problem on the measured link.

   *TODO* Should we discourage this?  It creates unnecessary traffic...

9.2.  MTU

   SCION provides MTU information for every AS-level link on a path.

9.3.  Detecting Byzantine ASes and Links

   By comparing performance (latency, bandwidth, packet drop rate, link
   errors, MTU) of multiple paths, we can (with some accuracy) detect
   unreliable links and ASes.  These can be blacklisted and excluded
   from further path selection, or possibly kept as backup paths for
   emergencies.

   *TODO* Add reference to research.

   *TODO* Move to Path Metadata section?

9.4.  DMTP

   One example of an application / algorithm is discussed in [DMTP].

9.5.  Congestion Control

   General recommendations for congestion control are defined in
   Congestion Control Principles [CC-PRINCIPLES].  Congestion control
   for QUIC is discussed in QUIC Loss Detection and Congestion Control
   [QUIC-RECOVERY].  More generally, congestion control for UDP is
   discussed in the UDP Usage Guidelines [UDP-GUIDELINES].  UDP MTU
   discovery is further developed in [MTU-DISCOVERY].

   Multipath congestion control is also discussed for TCP in
   [CC-MULTIPATH-TCP].  They state that "One of the prominent problems
   is that running existing algorithms such as standard TCP
   independently on each path would give the multipath flow more than
   its fair share at a bottleneck link traversed by more than one of its
   subflows.".  This can be avoided in SCION through link-level analysis
   of flows and selecting paths that do not create or share a bottleneck
   link.  This avoids the need for Coupled Congestion Control.

   The second point in [CC-MULTIPATH-TCP] is "Further, it is desirable
   that a source with multiple paths available will transfer more
   traffic using the least congested of the paths, achieving a property
   called "resource pooling" where a bundle of links effectively behaves
   like one shared link with bigger capacity.".  This can be achieved
   with a simple load distribution algorithm.

   *TODO* Differentiate "load distribution" from "path selection".

   There are several congestion control algorithms proposed in
   literature, e.g. LIA, OLIA, BALIA and RSF.  These combine congestion
   control with path selection algorithms.  For simplicity, we suggest
   separating concerns in terms of congestion control and path
   selection.  This allows us to better tailor the solutions to the
   different scenarios discussed in (SCENARIOS).  The proposition is to
   use standard congestion control per path (LIST HERE), tailored for
   each use case (max bandwidth / low latency) and on top of that
   separately use path selection (load distribution) algorithms.

   *TODO* Terminology: path selection vs load distribution?

9.6.  Load Distribution (Scheduling)

   Load distribution algorithms are mainly useful for high bandwidth
   (HBW) scenarios.  Latency may still be relevant though, for example
   for high definition video streams.  Scheduling halps distributing the
   transfer load efficiently over multiple path.

   However, sending data stream over multiple paths in parallel will
   usually result in packets arriving out of order at the receiver.
   This should be avoided because:

   *  Packet reordering requires larger buffers on the receiver side
      which are used to put packets back in order.  Latency, jitter and
      drop rate on different paths directly affect the required buffer
      size.

   *  Head of line blocking (HOLB): the latency of the slowest packet
      determines the effective latency of the stream.  This may be
      ignored for data transfers where latency is irrelevant.

   These problems can be mitigated, but it is difficult to do so for
   both problems at the same time.  A simple way to mitigate these
   problem is to select multiple paths with similar latency.

   Another way to mitigate these problems is to schedule packets on
   different paths such that they are likely to arrive in (more or less)
   the correct order.  Care should be taken to avoid requiring an
   equally large buffer on the sender side.

   *TODO* Check which existing algorithms do that.

   *TODO* Can we facilitate QUIC streams for this?

10.  Applications

10.1.  Data Transfer

   The aim of a data transfer application is to maximize throughput,
   regardless of latency, jitter or packet loss.

   The solution here is to identify multiple paths that are either
   disjunct, or where the non-disjunct links allow higher throughput
   than other links on the same paths (i.e. high enough to prevent the
   link from being a bottleneck).

10.2.  Low Latency

   There are multiple approaches to transfer traffic with the lowest
   possible latency.  For example:

   1) With separate latency measurements.  Latency measurements run in
   parallel to data traffic.  This allows performing measurements at a
   different frequency and over many more paths than payload traffic.
   This can be useful if payload packets are large and sending them
   redundantly over multiple links is to costly or considered to
   invasive with respect to other network users.  Low frequency
   measurements may be combined with traffic prediction algorithms in
   order to identify best paths between measurements.  Due to low
   bandwidth overhead, this may be the most cost efficient approach.  It
   may be possible to do this with SCION SCMP packets, either with ECHO
   packets or possibly with traceroute if the AS internal latency of the
   destination AS is negligible (because it may be small or it may be
   almost the same for all border routers that are on interesting
   paths).

   2) With implicit measurements through QUIC ACK frames.  Section 13.2
   of [QUIC-TRANSPORT] recommends sending an ACK frame after receiving
   at least two ack-eliciting packets or after a delay.  If the
   application sends data on multiple paths in parallel, this may be
   sufficient for some low latency applications.  [QUIC-ACKFREQUENCY]
   proposes an extension that allows more control over how often and
   when ACK-FRAMES are sent.  This approach can be useful if
   [QUIC-ACKFREQUENCY] becomes available or if the ACK behavior of the
   standard QUIC server is sufficient.

   3) With implicit measurements through application specific ACKs.
   This is useful if the application can sensibly be adapted to have its
   own ACK protocol.

   Network analysis can be used to identify, and subsequently avoid,
   links with high or unreliable latency.

10.3.  High Availability / Redundancy

   An approach to high availability is to send data on multiple paths in
   parallel.  A tradeoff here is that sending on all available paths is
   probably infeasible.  Depending on cost factors, and to avoid
   overloading the network, any algorithms should keep redundant sending
   to a minimum.

   Path analysis can be used to identify multiple paths that are mostly
   or completely (using multiple interfaces) disjunct, but that still
   satisfy latency, bandwidth, and other constraints.

   Additional polling with SCMP or with additional QUIC stream may be
   used to regularly measure packet drop rates or latency variations.

10.4.  Multipathing for Anonymity

   Multipathing could also be used for anonymity, e.g. by switching
   paths at random intervals.  With a continuous data stream, care
   should be taken that new paths are not just switched over from one to
   the next, otherwise traffic characteristics may be used to identify
   paths.  For example, paths could be identified by packet frequency,
   packet burst frequency or general bandwidth.  For continuous stream,
   just moving one stream from one path to another may expose stream
   identity.

   As mitigation, a sender could start sending on a new path for a while
   before stopping sending on the old path.  The sender could send
   redundant data or random data at a suitable bandwidth.

   *TODO* Should we really recommend bandwidth usage.

   *TODO* Is this SCION specific?  SCION allows for choosing paths based
   on trusted or untrusted ASes, but this is not specific to
   multipathing...

11.  API Design consideration

11.1.  Multipathing for Applications

   Applications will have very different requirements on a multipath
   API.  A comprehensive API should therefore allow for mostly automatic
   selection of Section 9.1 Path Selection and Congestion Control
   algorithms Section 9.5.

   At the same time it should give access to SCION paths and their
   metadata to allow implementation of custom algorithms.

11.2.  Algorithm Integration

   Several proposals in Section 10.2 and Section 10.3 suggest sending
   data redundantly in parallel on multiple paths.  Similarly, some
   proposals suggest sending packets purely for latency measurements.

   Congestion control algorithms and path selection algorithms should
   try to hide parallel transfer and measurement streams from the
   application.  This may also depend on API designer to provide such
   transparent multipathing with additional code on the application
   level.

12.  Security Considerations

   This document has no security considerations.

   May sending data on multiple paths in parallel, or at regular
   intervals, expose information about data streams?  E.g. can streams
   be associated with users such that a change in connection ID does not
   help anonymity?

12.1.  Latency Polling

   If a user sends latency measurements on 10 paths in parallel every 5
   seconds, then these 10 paths can (with some probability) be
   attributed to the same user.  Solution: do not send all probes at the
   same time.  To prevent patterns (1. after 0.1s, 2. after 0.3s, 3.
   after 0.35s, ...) the interval between packets on each path should
   also vary.  Additionally, the number of polled paths should vary.

12.2.  Path Validation

   See Section 4.1.

12.3.  More ?

   See Section 10.4.

   *TODO*

13.  IANA Considerations

   This document has no IANA actions.

14.  References

14.1.  Normative References

   [CC-PRINCIPLES]
              Floyd, S., "Congestion Control Principles", BCP 41,
              RFC 2914, DOI 10.17487/RFC2914, September 2000,
              <https://www.rfc-editor.org/rfc/rfc2914>.

   [DCCP-UDPENCAP]
              Phelan, T., Fairhurst, G., and C. Perkins, "DCCP-UDP: A
              Datagram Congestion Control Protocol UDP Encapsulation for
              NAT Traversal", RFC 6773, DOI 10.17487/RFC6773, November
              2012, <https://www.rfc-editor.org/rfc/rfc6773>.

   [MPTCP-ARCHITECTURE]
              Ford, A., Raiciu, C., Handley, M., Barre, S., and J.
              Iyengar, "Architectural Guidelines for Multipath TCP
              Development", RFC 6182, DOI 10.17487/RFC6182, March 2011,
              <https://www.rfc-editor.org/rfc/rfc6182>.

   [MTU-DISCOVERY]
              Fairhurst, G., Jones, T., Tüxen, M., Rüngeler, I., and T.
              Völker, "Packetization Layer Path MTU Discovery for
              Datagram Transports", RFC 8899, DOI 10.17487/RFC8899,
              September 2020, <https://www.rfc-editor.org/rfc/rfc8899>.

   [QUIC-RECOVERY]
              Iyengar, J., Ed. and I. Swett, Ed., "QUIC Loss Detection
              and Congestion Control", RFC 9002, DOI 10.17487/RFC9002,
              May 2021, <https://www.rfc-editor.org/rfc/rfc9002>.

   [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., "Using TLS to Secure
              QUIC", RFC 9001, DOI 10.17487/RFC9001, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9001>.

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", RFC 9000,
              DOI 10.17487/RFC9000, May 2021,
              <https://www.rfc-editor.org/rfc/rfc9000>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [UDP-GUIDELINES]
              Eggert, L., Fairhurst, G., and G. Shepherd, "UDP Usage
              Guidelines", BCP 145, RFC 8085, DOI 10.17487/RFC8085,
              March 2017, <https://www.rfc-editor.org/rfc/rfc8085>.

14.2.  Informative References

   [CC-MULTIPATH-TCP]
              Raiciu, C., Handley, M., and D. Wischik, "Coupled
              Congestion Control for Multipath Transport Protocols",
              RFC 6356, DOI 10.17487/RFC6356, October 2011,
              <https://www.rfc-editor.org/rfc/rfc6356>.

   [DMTP]     John, T. and T. Riechard, "Deadline Aware Streams in MP-
              QUIC", Work in Progress, Internet-Draft, draft-tjohn-quic-
              multipath-dmtp-00, 3 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-tjohn-quic-
              multipath-dmtp-00>.

   [OLIA]     Khalili, R., Gast, N., Popovic, M., Upadhyay, U., and J.
              Le Boudec, "MPTCP is not pareto-optimal: performance
              issues and a possible solution", Proceedings of the 8th
              international conference on Emerging networking
              experiments and technologies, ACM , 2012.

   [PATH-VOCABULARY]
              Enghardt, R. and C. Krähenbühl, "A Vocabulary of Path
              Properties", RFC 9473, DOI 10.17487/RFC9473, September
              2023, <https://www.rfc-editor.org/rfc/rfc9473>.

   [QUIC-ACKFREQUENCY]
              Iyengar, J., Swett, I., and M. Kühlewind, "QUIC
              Acknowledgment Frequency", Work in Progress, Internet-
              Draft, draft-ietf-quic-ack-frequency-11, 28 February 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-quic-
              ack-frequency-11>.

   [QUIC-MP]  Liu, Y., Ma, Y., De Coninck, Q., Bonaventure, O., Huitema,
              C., and M. Kühlewind, "Multipath Extension for QUIC", Work
              in Progress, Internet-Draft, draft-ietf-quic-multipath-14,
              23 April 2025, <https://datatracker.ietf.org/doc/html/
              draft-ietf-quic-multipath-14>.

   [SCION-CP] de Kater, C., Rustignoli, N., and S. Hitz, "SCION Control
              Plane", Work in Progress, Internet-Draft, draft-dekater-
              scion-controlplane-08, 3 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-dekater-
              scion-controlplane-08>.

   [SCION-DP] de Kater, C., Rustignoli, N., Hugly, J., and S. Hitz,
              "SCION Data Plane", Work in Progress, Internet-Draft,
              draft-dekater-scion-dataplane-05, 3 March 2025,
              <https://datatracker.ietf.org/doc/html/draft-dekater-
              scion-dataplane-05>.

   [UMCC]     Gartner, M. and D. Hausheer, "UMCC: Uncoupling Multipath
              Congestion Control through Shared Bottleneck Detection in
              Path-Aware Networks", Proceedings of the IEEE 49th
              Conference on Local Computer Networks (LCN) , 2024.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Jelte van Bommel
   ETH Zurich
   Email: jelte.vanbommel@inf.ethz.ch


   Francois Wirz
   ETH Zurich
   Email: wirzf@inf.ethz.ch


   Tilmann Zaeschke (editor)
   ETH Zurich
   Email: tilmann.zaeschke@inf.ethz.ch
